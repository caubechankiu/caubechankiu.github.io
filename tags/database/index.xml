<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on caubechankiu's miscellaneous notes</title><link>https://caubechankiu.github.io/tags/database/</link><description>Recent content in Database on caubechankiu's miscellaneous notes</description><generator>Hugo</generator><language>vi-VN</language><copyright>© caubechankiu</copyright><lastBuildDate>Tue, 29 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://caubechankiu.github.io/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>The Secret Sauce Behind NoSQL: LSM Tree</title><link>https://caubechankiu.github.io/posts/the-secret-sauce-behind-nosql-lsm-tree/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://caubechankiu.github.io/posts/the-secret-sauce-behind-nosql-lsm-tree/</guid><description>Các cơ sở dữ liệu NoSQL như Cassandra đã bùng nổ về độ phổ biến trong những năm gần đây. Một trong những động lực chính là nhu cầu không ngừng về việc tiếp nhận lượng dữ liệu khổng lồ từ ngày càng nhiều nguồn như ứng dụng di động và thiết bị IoT. Bí mật đằng sau nhiều cơ sở dữ liệu NoSQL này là một cấu trúc dữ liệu gọi là Log Structured Merge tree (LSM tree).</description></item><item><title>ACID</title><link>https://caubechankiu.github.io/posts/acid/</link><pubDate>Thu, 07 Jul 2022 09:47:31 +0700</pubDate><guid>https://caubechankiu.github.io/posts/acid/</guid><description>ACID là viết tắt của Atomicity, Consistency, Isolation và Durability - bốn thuộc tính quan trọng đảm bảo các transaction trong database đáng tin cậy, ngay cả khi có sự cố xảy ra.</description></item><item><title>CAP Theorem</title><link>https://caubechankiu.github.io/posts/cap-theorem/</link><pubDate>Fri, 02 Apr 2021 10:43:32 +0700</pubDate><guid>https://caubechankiu.github.io/posts/cap-theorem/</guid><description>Hiểu đúng về sự đánh đổi trong hệ thống phân tán. Định lý CAP (CAP Theorem) là một nguyên tắc quan trọng trong lĩnh vực hệ thống phân tán, được nhà khoa học máy tính Eric Brewer đề xuất vào năm 2000</description></item><item><title>Optimistic Lock vs Pessimistic Lock</title><link>https://caubechankiu.github.io/posts/optimistic-lock-vs-pessimistic-lock/</link><pubDate>Wed, 04 Mar 2020 09:47:31 +0700</pubDate><guid>https://caubechankiu.github.io/posts/optimistic-lock-vs-pessimistic-lock/</guid><description>Trong quản lý giao dịch và cạnh tranh truy cập dữ liệu, có hai chiến lược chính để kiểm soát tính nhất quán: &lt;strong>Optimistic Lock&lt;/strong> và &lt;strong>Pessimistic Lock&lt;/strong>. Mỗi loại có cách tiếp cận khác nhau trong việc xử lý xung đột dữ liệu. Bài viết này sẽ phân tích chi tiết hai loại lock này, đồng thời giải thích hai dạng của &lt;strong>Pessimistic Lock&lt;/strong> là &lt;strong>Shared Lock&lt;/strong> và &lt;strong>Exclusive Lock&lt;/strong>.</description></item></channel></rss>